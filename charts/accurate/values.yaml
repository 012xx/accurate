# Deprecated: Use crds.enabled and crds.keep instead.
installCRDs: true

crds:
  # This option decides if the CRDs should be installed
  # as part of the Helm installation.
  enabled: true

  # This option makes it so that the "helm.sh/resource-policy": keep
  # annotation is added to the CRD. This will prevent Helm from uninstalling
  # the CRD when the Helm release is uninstalled.
  # WARNING: when the CRDs are removed, all Accurate custom resources
  # like subnamespaces will be removed too by the garbage collector.
  keep: true

image:
  # image.repository -- Accurate image repository to use.
  repository: ghcr.io/cybozu-go/accurate

  # image.tag -- Accurate image tag to use.
  # @default -- `{{ .Chart.AppVersion }}`
  tag: app-version-placeholder

  # image.pullPolicy -- Accurate image pullPolicy.
  pullPolicy:  # Always

controller:
  # controller.replicas -- Specify the number of replicas of the controller Pod.
  replicas: 2

  # controller.resources -- Specify resources.
  resources:
    requests:
      cpu: 100m
      memory: 20Mi

  # controller.terminationGracePeriodSeconds -- Specify terminationGracePeriodSeconds.
  terminationGracePeriodSeconds: 10

  # controller.extraArgs -- Optional additional arguments.
  extraArgs: []

  config:
    # controller.config.labelKeys -- Labels to be propagated to sub-namespaces.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    ## https://pkg.go.dev/path#Match
    labelKeys: []
    # - team

    # controller.config.annotationKeys -- Annotations to be propagated to sub-namespaces.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    ## https://pkg.go.dev/path#Match
    annotationKeys: []
    # An example to propagate an annotation for MetalLB
    # https://metallb.universe.tf/usage/#requesting-specific-ips
    # - metallb.universe.tf/address-pool

    # controller.config.subNamespaceLabelKeys -- Labels to be propagated to sub-namespaces from SubNamespace resource.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    # https://pkg.go.dev/path#Match
    subNamespaceLabelKeys: []
    # - app

    # controller.config.subNamespaceAnnotationKeys -- Annotations to be propagated to sub-namespaces from SubNamespace resource.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    # https://pkg.go.dev/path#Match
    subNamespaceAnnotationKeys: []
    # - foo.bar/baz

    # controller.config.watches -- List of GVK for namespace-scoped resources that can be propagated.
    # Any namespace-scoped resource is allowed.
    watches:
      - group: rbac.authorization.k8s.io
        version: v1
        kind: Role
      - group: rbac.authorization.k8s.io
        version: v1
        kind: RoleBinding
      - version: v1
        kind: Secret
      - version: v1
        kind: ResourceQuota

    # controller.config.propagateLabelKeyExcludes -- Labels to exclude when propagating resources.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    ## https://pkg.go.dev/path#Match
    propagateLabelKeyExcludes:
      - '*kubernetes.io/*'

    # controller.config.propagateAnnotationKeyExcludes -- Annotations to exclude when propagating resources.
    # It is also possible to specify a glob pattern that can be interpreted by Go's "path.Match" func.
    ## https://pkg.go.dev/path#Match
    propagateAnnotationKeyExcludes:
      - '*kubernetes.io/*'

    # controller.config.namingPolicies -- List of nameing policy for SubNamespaces.
    # root and match are both regular expressions.
    # When a SubNamespace is created in a tree starting from a root namespace and the root namespace's name matches the "root" regular expression, the SubNamespace name is validated with the "match" regular expression.
    #
    # "match" namingPolicies can use variables of regexp capture group naming of "root" namingPolicies.
    # example:
    #   root: ^app-(?P<team>.*)
    #   match: ^app-${team}-.*
    #   root namespace: app-team1
    #   compiled match naming policy: ^app-team1-.*
    # This feature is provided using https://pkg.go.dev/regexp#Regexp.Expand
    # namingPolicies:
    #   - root:  foo
    #     match: foo_.*
    #   - root:  bar
    #     match: bar_.*
    #   - root:  ^app-(?P<team>.*)
    #     match: ^app-${team}-.*

  additionalRBAC:
    # controller.additionalRBAC.rules -- Specify the RBAC rules to be added to the controller.
    # ClusterRole and ClusterRoleBinding are created with the names `{{ release name }}-additional-resources`.
    # The rules defined here will be used for the ClusterRole rules.
    rules:
      - apiGroups:
          - ""
        resources:
          - resourcequotas
        verbs:
          - get
          - list
          - watch
          - create
          - patch
          - delete
    # controller.additionalRBAC.clusterRoles -- Specify additional ClusterRoles to be granted
    # to the accurate controller. "admin" is recommended to allow the controller to manage
    # common namespace-scoped resources.
    clusterRoles:
    - admin

webhook:
  # webhook.allowCascadingDeletion -- Enable to allow cascading deletion of namespaces.
  # Accurate webhooks will only allow deletion of a namespace with children if this option is enabled.
  # Deleting namespaces is very dangerous, and deleting sub-namespaces can result in entire subtrees
  # of namespaces being deleted as well. So enable this option with care!
  # That said, enabling this option can be very useful to allow modern GitOps controllers like FluxCD
  # to operate without errors based on desired state specified in Git.
  allowCascadingDeletion: false
